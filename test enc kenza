from Crypto import Random
from Crypto.Cipher import AES
import os 
import os.path
from os import listdir
from os.path import isfile,join
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.kdf.hkdf import HKDF

class Encryptor:
    def __init__(self,key):
        self.key=key
    def pad(self,s):
        return s+b"\0" * (AES.block_size - len(s)%AES.block_size)
    def encrypt(self,message):
        message=self.pad(message)
        iv=Random.new().read(AES.block_size)
        cipher=AES.new(self.key,AES.MODE_CBC,iv)
        return iv+cipher.encrypt(message)
    def decrypt(self,cipherText):
        iv=cipherText[:AES.block_size]
        cipher=AES.new(self.key,AES.MODE_CBC,iv)
        plaintext=cipher.decrypt(cipherText[AES.block_size:])
        return plaintext.rstrip(b"\0")
    
def derive_aes_key(shared_secret):
    # Perform key derivation using HKDF
    hkdf = HKDF(
        algorithm=hashes.SHA256(),
        length=32,  # AES-256 key size (32 bytes)
        salt=None,
        info=b'diffie-hellman-secret-to-aes-key',
        backend=default_backend()
    )
    aes_key = hkdf.derive(shared_secret)
    return aes_key

    
shared_secret=os.urandom(32)
#aes_key=derive_aes_key(shared_secret)
#encryptor=Encryptor(aes_key)
transposition_key=b"852369741255896325874"
#cipherText=encryptor.encrypt(transposition_key)
#shared_secret_key=encryptor.encrypt()
#print("encrypted:",cipherText)
#decrypted_transposition_key=encryptor.decrypt(cipherText)
#print("decrypted : ",decrypted_transposition_key)

def file_creation(shared_secret,transposition_key):
    aes_key=derive_aes_key(shared_secret)
    encryptor=Encryptor(aes_key)
    transposition_key_encrypted=encryptor.encrypt(transposition_key)
    with open("enc_key.txt", "w") as file:
     #Write the variable to the file
     transposition_key_str=str(transposition_key)
     file.write(transposition_key_encrypted)
