from Crypto import Random
from Crypto.Cipher import AES
import os 
import os.path
from os import listdir
from os.path import isfile,join

class Encryptor:
    def _init_(self,key):
        self.key=key
    def pad(self,s):
        return s+b"\0" * (AES.block_size - len(s)%AES.block_size)
    def encrypt():
        message=self.pad(message)
        iv=Random.new().read(AES.block_size)
        cipher=AES.new(key,AES.MODE_CBC,iv)
        return iv + cipher.encrypt(message)
    def decrypt(cipherText,key):
        iv=cipherText[:AES.block_size]
        cipher=AES.new(key,AES.MODE_CBC,iv)
        plaintext=cipher.decrypt(cipherText[AES.block_size_size:])
        return plaintext.rstrip(b"\0")

Traceback (most recent call last):
  File "/home/liveuser/Documents/Python-3.12.3/Programs/test enc.py", line 26, in <module>
    cipherText=Encryptor.encrypt(transposition_key)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/liveuser/Documents/Python-3.12.3/Programs/test enc.py", line 16, in encrypt
    cipher=AES.new(self.key,AES.MODE_CBC,iv)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/liveuser/.local/lib/python3.11/site-packages/Crypto/Cipher/AES.py", line 228, in new
    return _create_cipher(sys.modules[__name__], key, mode, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/liveuser/.local/lib/python3.11/site-packages/Crypto/Cipher/__init__.py", line 79, in _create_cipher
    return modes[mode](factory, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/liveuser/.local/lib/python3.11/site-packages/Crypto/Cipher/_mode_cbc.py", line 274, in _create_cbc_cipher
    cipher_state = factory._create_base_cipher(kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/liveuser/.local/lib/python3.11/site-packages/Crypto/Cipher/AES.py", line 90, in _create_base_cipher
    raise ValueError("Incorrect AES key length (%d bytes)" % len(key))
ValueError: Incorrect AES key length (34 bytes)
