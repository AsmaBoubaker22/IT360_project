from Crypto import Random
from Crypto.Cipher import AES
import os 
import os.path
from os import listdir
from os.path import isfile,join

class Encryptor:
    def __init__(self,key):
        self.key=key
    def pad(self,s):
        return s+b"\0" * (AES.block_size - len(s)%AES.block_size)
    def encrypt(self,message):
        message=self.pad(message)
        iv=Random.new().read(AES.block_size)
        cipher=AES.new(self.key,AES.MODE_CBC,iv)
        return cipher.encrypt(message)
    def decrypt(cipherText,self):
        iv=cipherText[:AES.block_size]
        cipher=AES.new(self.key,AES.MODE_CBC,iv)
        plaintext=cipher.decrypt(cipherText[AES.block_size_size:])
        return plaintext.rstrip(b"\0")
aes_key=os.urandom(32)
Encryptor=Encryptor(aes_key)
transposition_key=b"852369741255896325874"
cipherText=Encryptor.encrypt(transposition_key)
print("encrypted:",cipherText)
decrypted_transposition_key=Encryptor.decrypt(cipherText)
print("decrypted : ",decrypted_transposition_key)

