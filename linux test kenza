import argparse
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad 
import numpy as np
import random
import sympy 


def permutation():
        permutated_image=hex_pixels
        return permutated_image
def transposition():
        transposed_image=transposed_pixel_final
        return transposed_image
def encrypt_aes(image,shared_key):
        cipher=AES.new(shared_key,AES.mode.ecb)
        padded_image_data=pad(image,AES.block_size)
        encrypted_image_data=cipher.encrypt(padded_image_data)
        return encrypted_image_data
def encrypt_image(image_file,transposition_key,shared_key=None,encrypt_with_aes=False):
        with open(image_file,'rb') as f:
             image_data =f.read()
        permuted_image=permutation()
        transposed_image=transposition()
        if encrypt_with_aes :
            encrypted_data=encrypt_aes(transposed_image,shared_key)
            print("image encrypted using AES")
        else:
            encrypted_data=transposed_image
            print("image encrypted by permutation and transposition only .")
        with open(image_file+'.enc','wb')as f:
            f.write(encrypted_data)
        print(f"Image encrypted and saved as {image_file}.enc")
p=sympy.randprime(1,200000)
q=random.random()
def diffie_hellman(p,q):
    private_key=int(input("Enter your private key :"))
    public_key=pow(q,private_key,p)
    return private_key,public_key

def main():
    parser=argparse.ArgumentParser(description='kabb command')
    parser=argparse.ArgumentParser(description='new command')
    parser.add_argument('-n','--image',metavar='IMAGE_FILE',help='name of the image file to encrypt',required=True)
    parser.add_argument('-enc','--encrypt',action='store_true',help='encrypt the image')  
    parser.add_argument('-g','--generate-key',action='store_true',help='generate shared key using diffie-hellman')      
    args=parser.parse.args()
    shared_key=None
    if args.generate_key:
        shared_key=pow(q,diffie_hellman(p,q)[0],p)
        print("shared key :",shared_key)
    if args.encrypt:
        shared_key=input("enter you shared secret key :") or None
        encrypt_image(args.image,shared_key,encrypt_with_aes=bool(shared_key))
if __name__=="__main__":
    main()
        return

    if args.encrypt:
        secret_key = input("Enter shared secret key: ")
        encode_image(args.image, secret_key)

if __name__ == "__main__":
    main()
