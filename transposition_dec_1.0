def reverse_transformed_string(transformed_string, key):
    n = len(transformed_string)
    columns_with_1_character = n % key
    full_columns = key - columns_with_1_character

    if full_columns != 0:
        characters_per_full_column = (n - columns_with_1_character) // full_columns
    else:
        characters_per_full_column = 0  # All columns have only 1 character

    columns = []
    idx = 0

    for _ in range(full_columns):
        if idx < n:
            columns.append(transformed_string[idx:idx + characters_per_full_column])
            idx += characters_per_full_column

    for _ in range(columns_with_1_character):
        if idx < n:
            columns.append(transformed_string[idx:idx + 1])
            idx += 1

    # Reconstruct the original string
    original_string = []
    # Iterate row-wise to reconstruct the original string
    max_row_length = max((len(col) for col in columns), default=0)
    for row in range(max_row_length):
        for column in columns:
            if row < len(column):
                original_string.append(column[row])

    return ''.join(original_string)


# Test
original_from_2 = reverse_transformed_string('6HIAOE', 2)  # Expecting '6AHOIE'
original_from_4 = reverse_transformed_string('6IAEHO', 4)  # Expecting '6AHOIE'

print("'6HIAOE'---->", original_from_2)
print("'6IAEHO'---->", original_from_4)
